---
import logoUrl from "../assets/logo.svg?url"
import { withBase } from "../lib/paths"
const currentPath = Astro.url.pathname
const calendlyUrl = import.meta.env.PUBLIC_CALENDLY_URL
const ctaHref = calendlyUrl || withBase("/contact/")
---
<header class="sticky top-0 z-50 bg-white shadow-header px-6">
  <input id="nav-toggle" type="checkbox" class="peer sr-only" />
  <div class="container">
    <div class="flex h-16 items-center justify-between">
      <a href={withBase('/')} class="flex items-center gap-2">
        <img src={logoUrl} alt="Scrapyard Sites" class="h-8 w-8" />
        <span class="text-lg font-semibold tracking-tight">
          <span class="text-brand-orange">Scrapyard</span> Sites
        </span>
      </a>

      <nav class="hidden md:flex items-center gap-6 text-sm font-medium" role="navigation" aria-label="Primary">
        <a href={withBase('/')} aria-current={currentPath === withBase('/')} class={`nav-link ${currentPath === withBase('/') ? 'text-brand-orange' : ''}`}>Home</a>
        <a href={withBase('/pricing/')} aria-current={currentPath.startsWith(withBase('/pricing/')) ? 'page' : undefined} class={`nav-link ${currentPath.startsWith(withBase('/pricing/')) ? 'text-brand-orange' : ''}`}>Pricing</a>
        <a href={withBase('/about/')} aria-current={currentPath.startsWith(withBase('/about/')) ? 'page' : undefined} class={`nav-link ${currentPath.startsWith(withBase('/about/')) ? 'text-brand-orange' : ''}`}>About</a>
        <a href={withBase('/contact/')} aria-current={currentPath.startsWith(withBase('/contact/')) ? 'page' : undefined} class={`nav-link ${currentPath.startsWith(withBase('/contact/')) ? 'text-brand-orange' : ''}`}>Contact</a>
      </nav>

      <div class="hidden md:flex">
        <a href={ctaHref} class="btn btn-primary px-4 py-2" data-goal="CTA: Book Discovery (Header)">
          Book a 15-minute call
        </a>
      </div>

      <label for="nav-toggle" class="md:hidden inline-flex items-center justify-center rounded-md p-2 text-zinc-700 hamburger-icon" aria-label="Open Menu" role="button" aria-controls="mobile-nav" aria-expanded="false">
        <div class="w-6 h-6 flex flex-col justify-center items-center space-y-1">
          <div class="w-5 h-0.5 bg-current hamburger-line"></div>
          <div class="w-5 h-0.5 bg-current hamburger-line"></div>
          <div class="w-5 h-0.5 bg-current hamburger-line"></div>
        </div>
      </label>
    </div>
  </div>
</header>

<div id="mobile-nav" class="mobile-menu-overlay fixed inset-0 z-40" style="padding-top: 4rem;" role="dialog" aria-modal="true" aria-label="Site Navigation">
  <div class="menu-content shadow-md h-full flex flex-col">
    <nav class="flex-1 overflow-y-auto p-8 text-lg font-medium space-y-6" aria-label="Mobile Navigation">
      <a href={withBase('/')} aria-current={currentPath === withBase('/')} class={`mobile-nav-item block focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-brand-orange rounded-sm ${currentPath === withBase('/') ? 'text-brand-orange' : ''}`}>Home</a>
      <a href={withBase('/pricing/')} aria-current={currentPath.startsWith(withBase('/pricing/')) ? 'page' : undefined} class={`mobile-nav-item block focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-brand-orange rounded-sm ${currentPath.startsWith(withBase('/pricing/')) ? 'text-brand-orange' : ''}`}>Pricing</a>
      <a href={withBase('/about/')} aria-current={currentPath.startsWith(withBase('/about/')) ? 'page' : undefined} class={`mobile-nav-item block focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-brand-orange rounded-sm ${currentPath.startsWith(withBase('/about/')) ? 'text-brand-orange' : ''}`}>About</a>
      <a href={withBase('/contact/')} aria-current={currentPath.startsWith(withBase('/contact/')) ? 'page' : undefined} class={`mobile-nav-item block focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-brand-orange rounded-sm ${currentPath.startsWith(withBase('/contact/')) ? 'text-brand-orange' : ''}`}>Contact</a>
    </nav>
    <div class="p-8 border-t border-zinc-100" style="padding-bottom: max(2rem, env(safe-area-inset-bottom, 0) + 1rem);">
      <a href={ctaHref} class="btn btn-primary w-full px-4 py-3">
        Book a 15-minute call
      </a>
    </div>
  </div>
</div>

<script is:inline>
  (function() {
    var checkbox = document.getElementById('nav-toggle');
    var overlay = document.getElementById('mobile-nav');
    var toggles = document.querySelectorAll("label[for='nav-toggle']");
    var scrollPosition = 0;

    function setState(e) {
      var open = !!(checkbox && checkbox.checked);
      toggles.forEach(function(el){ el.setAttribute('aria-expanded', open ? 'true' : 'false'); });
      
      // Handle scroll locking for iOS
      if (open) {
        scrollPosition = window.pageYOffset;
        document.body.style.overflow = 'hidden';
        document.body.style.position = 'fixed';
        document.body.style.top = '-' + scrollPosition + 'px';
        document.body.style.width = '100%';
      } else {
        // Delay removing body styles until after menu animation completes
        setTimeout(function() {
          document.body.style.overflow = '';
          document.body.style.position = '';
          document.body.style.top = '';
          document.body.style.width = '';
          window.scrollTo(0, scrollPosition);
        }, 300); // Match the menu animation duration
      }
      
      // Handle menu-open class immediately for hamburger animation
      document.body.classList.toggle('menu-open', open);
      
      if (overlay) {
        if (open) {
          // Show menu container first
          overlay.classList.add('menu-showing');
          // Then animate after next frame
          requestAnimationFrame(function() {
            overlay.classList.add('menu-open');
          });
        } else {
          // Remove animation class first
          overlay.classList.remove('menu-open');
          // Then hide container after animation completes
          setTimeout(function() {
            overlay.classList.remove('menu-showing');
          }, 300);
        }
      }
      
      // Only focus if keyboard was used to open (not click)
      if (open && overlay && e && e.type === 'keydown') {
        var first = overlay.querySelector('a, button, [tabindex]:not([tabindex="-1"])');
        if (first && typeof first.focus === 'function') first.focus();
      }
    }

    // Initialize the menu state - handled by CSS now

    if (checkbox) checkbox.addEventListener('change', setState);
    document.addEventListener('keydown', function(e){
      if (e.key === 'Escape' && checkbox && checkbox.checked) {
        checkbox.checked = false;
        setState(e);
      }
    });
    if (overlay) overlay.addEventListener('click', function(e){
      var t = e.target;
      if (t && t.tagName === 'A' && checkbox) {
        checkbox.checked = false;
        setState(e);
      }
    });
    setState();
  })();
</script>

