---
import type { FaqItem } from "../data/faq"
interface Props {
	items: FaqItem[]
	heading?: string
	noTopPadding?: boolean
	noBottomPadding?: boolean
	tinted?: boolean
}
const {
	items,
	heading = "FAQ",
	noTopPadding = false,
	noBottomPadding = false,
	tinted = false,
} = Astro.props as Props
const sectionClass = `section${noTopPadding ? " pt-0" : ""}${noBottomPadding ? " pb-0" : ""}`
const detailsClass = tinted
	? "faq-details group rounded-md border border-brand-orange/20 bg-brand-orange/5 p-4 faq-tinted transition-all duration-300"
	: "faq-details group rounded-md border border-zinc-200 bg-white p-4 faq-default transition-all duration-300"
---
<section class={sectionClass} itemscope itemtype="https://schema.org/FAQPage">
  <h2 class="mt-1 text-2xl font-bold tracking-tight">{heading}</h2>
  <div class="mt-4 space-y-2">
    {items.map((it) => (
      <details class={detailsClass} itemscope itemprop="mainEntity" itemtype="https://schema.org/Question">
        <summary class="font-medium flex items-center justify-between" itemprop="name">
          <button class="faq-button text-left w-full flex items-center justify-between">
            <span>{it.q}</span>
            <svg class="faq-chevron h-5 w-5 transition-transform duration-[350ms] cubic-bezier(0.4, 0, 0.2, 1)" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          </button>
        </summary>
        <div class="faq-content" itemscope itemprop="acceptedAnswer" itemtype="https://schema.org/Answer">
          <div class="pt-2 text-sm text-zinc-700">
            <p itemprop="text">{it.a}</p>
          </div>
        </div>
      </details>
    ))}
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const faqButtons = document.querySelectorAll('.faq-button');
    
    faqButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        
        const details = this.closest('details');
        const chevron = this.querySelector('.faq-chevron');
        const isOpen = details.classList.contains('faq-opening');
        
        if (isOpen) {
          // Close animation
          details.classList.remove('faq-opening');
          chevron.style.transform = 'rotate(0deg)';
          
          setTimeout(() => {
            details.removeAttribute('open');
          }, 350);
        } else {
          // Open animation
          details.setAttribute('open', '');
          requestAnimationFrame(() => {
            details.classList.add('faq-opening');
            chevron.style.transform = 'rotate(180deg)';
          });
        }
      });
    });
  });
</script>


